# Penn EHR ---------------------------------------------------------
EHR_data <- do.call(rbind, list("reports_Penn_H"=sim$reports_Penn_H,
"reports_Penn_R"=sim$reports_Penn_R,
"reports_Penn_D"=sim$reports_Penn_D))
colnames(EHR_data) <- as.character(sim$day)
barplot(EHR_data,
col=c("red","blue","black") ,
border="white",
font.axis=2,
beside=T,
ylim=c(0, max(sim$reports_Penn_H, sim$reports_Penn_R, sim$reports_Penn_D)),
legend=rownames(EHR_data),
xlab="day",
font.lab=2,
args.legend = list(x='topleft'))
} else {
# Need to add code to plot subsequent simulations if more than one
}
}
}
}
plot(1:nrow(pmcmc_res), inv.logit(pmcmc_res$logit_Beta), type="l", xlab="iteration", ylab="Beta", ylim=c(0, max(inv.logit(pmcmc_res$logit_Beta))))
abline(h = inv.logit(true_logit_Beta), col="red")
plot(1:nrow(pmcmc_res), inv.logit(pmcmc_res$logit_phi), type="l", xlab="iteration", ylab="phi", ylim=c(0, max(inv.logit(pmcmc_res$logit_phi))))
abline(h = inv.logit(true_logit_phi), col="red")
plot(1:nrow(pmcmc_res), inv.logit(pmcmc_res$logit_psi), type="l", xlab="iteration", ylab="psi", ylim=c(0, max(inv.logit(pmcmc_res$logit_psi))))
abline(h = inv.logit(true_logit_psi), col="red")
plot(1:nrow(pmcmc_res), inv.logit(pmcmc_res$logit_gamma_one), type="l", xlab="iteration", ylab="gamma_one", ylim=c(0, max(inv.logit(pmcmc_res$logit_gamma_one))))
abline(h = inv.logit(true_logit_gamma_one), col="red")
plot(1:nrow(pmcmc_res), inv.logit(pmcmc_res$logit_gamma_two), type="l", xlab="iteration", ylab="gamma_two", ylim=c(0, max(inv.logit(pmcmc_res$logit_gamma_two))))
abline(h = inv.logit(true_logit_gamma_two), col="red")
plot(1:nrow(pmcmc_res), inv.logit(pmcmc_res$logit_theta_one), type="l", xlab="iteration", ylab="theta_one", ylim=c(0, max(inv.logit(pmcmc_res$logit_theta_one))))
abline(h = inv.logit(true_logit_theta_one), col="red")
plot(1:nrow(pmcmc_res), inv.logit(pmcmc_res$logit_theta_two), type="l", xlab="iteration", ylab="theta_two", ylim=c(0, max(inv.logit(pmcmc_res$logit_theta_two))))
abline(h = inv.logit(true_logit_theta_two), col="red")
plot(1:nrow(pmcmc_res), pmcmc_res$w_RNA_S, type="l", xlab="iteration", ylab="w_RNA_S", ylim=c(0, max(pmcmc_res$w_RNA_S)))
abline(h = true_w_RNA_S, col="red")
plot(1:nrow(pmcmc_res), pmcmc_res$w_RNA_E, type="l", xlab="iteration", ylab="w_RNA_E", ylim=c(0, max(pmcmc_res$w_RNA_E)))
abline(h = true_w_RNA_E, col="red")
plot(1:nrow(pmcmc_res), pmcmc_res$w_RNA_I, type="l", xlab="iteration", ylab="w_RNA_I", ylim=c(0, max(pmcmc_res$w_RNA_I)))
abline(h = true_w_RNA_I, col="red")
plot(1:nrow(pmcmc_res), pmcmc_res$w_RNA_H, type="l", xlab="iteration", ylab="w_RNA_H", ylim=c(0, max(pmcmc_res$w_RNA_H)))
abline(h = true_w_RNA_H, col="red")
plot(1:nrow(pmcmc_res), pmcmc_res$w_RNA_R, type="l", xlab="iteration", ylab="w_RNA_R", ylim=c(0, max(pmcmc_res$w_RNA_R)))
abline(h = true_w_RNA_R, col="red")
plot(1:nrow(pmcmc_res), pmcmc_res$w_Ser_S, type="l", xlab="iteration", ylab="w_Ser_S", ylim=c(0, max(pmcmc_res$w_Ser_S)))
abline(h = true_w_Ser_S, col="red")
plot(1:nrow(pmcmc_res), pmcmc_res$w_Ser_E, type="l", xlab="iteration", ylab="w_Ser_E", ylim=c(0, max(pmcmc_res$w_Ser_E)))
abline(h = true_w_Ser_E, col="red")
plot(1:nrow(pmcmc_res), pmcmc_res$w_Ser_I, type="l", xlab="iteration", ylab="w_Ser_I", ylim=c(0, max(pmcmc_res$w_Ser_I)))
abline(h = true_w_Ser_I, col="red")
plot(1:nrow(pmcmc_res), pmcmc_res$w_Ser_H, type="l", xlab="iteration", ylab="w_Ser_H", ylim=c(0, max(pmcmc_res$w_Ser_H)))
abline(h = true_w_Ser_H, col="red")
plot(1:nrow(pmcmc_res), pmcmc_res$w_Ser_R, type="l", xlab="iteration", ylab="w_Ser_R", ylim=c(0, max(pmcmc_res$w_Ser_R)))
abline(h = true_w_Ser_R, col="red")
plot(1:nrow(pmcmc_res), inv.logit(pmcmc_res$logit_prob_Penn_H), type="l", xlab="iteration", ylab="prob_Penn_H", ylim=c(0, max(inv.logit(pmcmc_res$logit_prob_Penn_H))))
abline(h = inv.logit(true_logit_prob_Penn_H), col="red")
plot(1:nrow(pmcmc_res), inv.logit(pmcmc_res$logit_prob_Penn_R), type="l", xlab="iteration", ylab="prob_Penn_R", ylim=c(0, max(inv.logit(pmcmc_res$logit_prob_Penn_R))))
abline(h = inv.logit(true_logit_prob_Penn_R), col="red")
plot(1:nrow(pmcmc_res), inv.logit(pmcmc_res$logit_prob_Penn_D), type="l", xlab="iteration", ylab="prob_Penn_D", ylim=c(0, max(inv.logit(pmcmc_res$logit_prob_Penn_D))))
abline(h = inv.logit(true_logit_prob_Penn_D), col="red")
dev.off()
dmeas <- function (S, E, I, H, R, D,
sample_size_RNA, sample_size_Ser,
w_RNA_S, w_RNA_R,
w_RNA_E, w_RNA_I, w_RNA_H,
w_Ser_S, w_Ser_E,
w_Ser_I, w_Ser_H, w_Ser_R,
logit_prob_Penn_H, logit_prob_Penn_R, logit_prob_Penn_D,
neg_RNA, pos_RNA_E, pos_RNA_I, pos_RNA_H,
neg_Ser, pos_Ser_I, pos_Ser_H, pos_Ser_R,
reports_Penn_H, reports_Penn_R, reports_Penn_D,
log,
...) {
# RT-PCR log likelihoods based on multivariate hypergeometric function -------
log_lik_RNA <- dmvhyper(x=c(neg_RNA,
pos_RNA_E,
pos_RNA_I,
pos_RNA_H),
n=c(round(S * w_RNA_S) + round(R * w_RNA_R),
round(E * w_RNA_E),
round(I * w_RNA_I),
round(H * w_RNA_H)),
k=sample_size_RNA,
log=log)
# Serology log likelihoods based on multivariate hypergeometric function -----
log_lik_Ser <- dmvhyper(x=c(neg_Ser,
pos_Ser_I,
pos_Ser_H,
pos_Ser_R),
n=c(round(S * w_Ser_S) + round(E * w_Ser_E),
round(I * w_Ser_I),
round(H * w_Ser_H),
round(R * w_Ser_R)),
k=sample_size_Ser,
log=log)
# Penn EHR likelihoods -------------------------------------------------------
log_lik_Penn_H <- dbinom(x=reports_Penn_H, size=H, prob=inv.logit(logit_prob_Penn_H), log=log)
log_lik_Penn_R <- dbinom(x=reports_Penn_R, size=R, prob=inv.logit(logit_prob_Penn_R), log=log)
log_lik_Penn_D <- dbinom(x=reports_Penn_D, size=D, prob=inv.logit(logit_prob_Penn_D), log=log)
# Combine the log likelihoods into combined log likelihood -------------------
combined_log_lik <- log_lik_RNA +
log_lik_Ser +
log_lik_Penn_H + log_lik_Penn_R + log_lik_Penn_D
# Return combined log likelihood ---------------------------------------------
return(c(combined_log_lik, log_lik_RNA, log_lik_Ser, log_lik_Penn_H, log_lik_Penn_R, log_lik_Penn_D))
}
res_list <- list()
res_list_dex <- 1
for (row_num in 1:nrow(sim)) {
res <- dmeas(S=sim$S, E=sim$E, I=sim$I, H=sim$H, R=sim$R, D=sim$D,
sample_size_RNA=25, sample_size_Ser=50,
w_RNA_S=1, w_RNA_R=5,
w_RNA_E=5, w_RNA_I=5, w_RNA_H=5,
w_Ser_S=1, w_Ser_E=5,
w_Ser_I=5, w_Ser_H=5, w_Ser_R=5,
logit_prob_Penn_H=0.2, logit_prob_Penn_R=0.01, logit_prob_Penn_D=0.2,
neg_RNA=sim$neg_RNA, pos_RNA_E=sim$pos_RNA_E, pos_RNA_I=sim$pos_RNA_I, pos_RNA_H=sim$pos_RNA_H,
neg_Ser=sim$neg_Ser, pos_Ser_I=sim$pos_Ser_I, pos_Ser_H=sim$pos_Ser_H, pos_Ser_R=sim$pos_Ser_R,
reports_Penn_H=sim$reports_Penn_H, reports_Penn_R=sim$reports_Penn_R, reports_Penn_D=sim$reports_Penn_D,
log=T)
res_list[[res_list_dex]] <- res
res_list_dex <- res_list_dex + 1
}
res_df <- do.call(rbind, res_list)
dmeas <- function (S, E, I, H, R, D,
sample_size_RNA, sample_size_Ser,
w_RNA_S, w_RNA_R,
w_RNA_E, w_RNA_I, w_RNA_H,
w_Ser_S, w_Ser_E,
w_Ser_I, w_Ser_H, w_Ser_R,
logit_prob_Penn_H, logit_prob_Penn_R, logit_prob_Penn_D,
neg_RNA, pos_RNA_E, pos_RNA_I, pos_RNA_H,
neg_Ser, pos_Ser_I, pos_Ser_H, pos_Ser_R,
reports_Penn_H, reports_Penn_R, reports_Penn_D,
log,
...) {
# RT-PCR log likelihoods based on multivariate hypergeometric function -------
log_lik_RNA <- dmvhyper(x=c(neg_RNA,
pos_RNA_E,
pos_RNA_I,
pos_RNA_H),
n=c(round(S * w_RNA_S) + round(R * w_RNA_R),
round(E * w_RNA_E),
round(I * w_RNA_I),
round(H * w_RNA_H)),
k=sample_size_RNA,
log=log)
# Serology log likelihoods based on multivariate hypergeometric function -----
log_lik_Ser <- dmvhyper(x=c(neg_Ser,
pos_Ser_I,
pos_Ser_H,
pos_Ser_R),
n=c(round(S * w_Ser_S) + round(E * w_Ser_E),
round(I * w_Ser_I),
round(H * w_Ser_H),
round(R * w_Ser_R)),
k=sample_size_Ser,
log=log)
# Penn EHR likelihoods -------------------------------------------------------
log_lik_Penn_H <- dbinom(x=reports_Penn_H, size=H, prob=inv.logit(logit_prob_Penn_H), log=log)
log_lik_Penn_R <- dbinom(x=reports_Penn_R, size=R, prob=inv.logit(logit_prob_Penn_R), log=log)
log_lik_Penn_D <- dbinom(x=reports_Penn_D, size=D, prob=inv.logit(logit_prob_Penn_D), log=log)
# Combine the log likelihoods into combined log likelihood -------------------
combined_log_lik <- log_lik_RNA +
log_lik_Ser +
log_lik_Penn_H + log_lik_Penn_R + log_lik_Penn_D
# Return combined log likelihood ---------------------------------------------
return(c(combined_log_lik, log_lik_RNA, log_lik_Ser, log_lik_Penn_H, log_lik_Penn_R, log_lik_Penn_D))
}
res[1]
res_list <- list()
res_list_dex <- 1
for (row_num in 1:nrow(sim)) {
res <- dmeas(S=sim$S, E=sim$E, I=sim$I, H=sim$H, R=sim$R, D=sim$D,
sample_size_RNA=25, sample_size_Ser=50,
w_RNA_S=1, w_RNA_R=5,
w_RNA_E=5, w_RNA_I=5, w_RNA_H=5,
w_Ser_S=1, w_Ser_E=5,
w_Ser_I=5, w_Ser_H=5, w_Ser_R=5,
logit_prob_Penn_H=logit(0.2), logit_prob_Penn_R=logit(0.01), logit_prob_Penn_D=logit(0.2),
neg_RNA=sim$neg_RNA, pos_RNA_E=sim$pos_RNA_E, pos_RNA_I=sim$pos_RNA_I, pos_RNA_H=sim$pos_RNA_H,
neg_Ser=sim$neg_Ser, pos_Ser_I=sim$pos_Ser_I, pos_Ser_H=sim$pos_Ser_H, pos_Ser_R=sim$pos_Ser_R,
reports_Penn_H=sim$reports_Penn_H, reports_Penn_R=sim$reports_Penn_R, reports_Penn_D=sim$reports_Penn_D,
log=T)
res_list[[res_list_dex]] <- res / res[1]
res_list_dex <- res_list_dex + 1
}
res_df <- do.call(rbind, res_list)
View(res_df)
res
dmeas <- function (S, E, I, H, R, D,
sample_size_RNA, sample_size_Ser,
w_RNA_S, w_RNA_R,
w_RNA_E, w_RNA_I, w_RNA_H,
w_Ser_S, w_Ser_E,
w_Ser_I, w_Ser_H, w_Ser_R,
logit_prob_Penn_H, logit_prob_Penn_R, logit_prob_Penn_D,
neg_RNA, pos_RNA_E, pos_RNA_I, pos_RNA_H,
neg_Ser, pos_Ser_I, pos_Ser_H, pos_Ser_R,
reports_Penn_H, reports_Penn_R, reports_Penn_D,
log,
...) {
# RT-PCR log likelihoods based on multivariate hypergeometric function -------
log_lik_RNA <- dmvhyper(x=c(neg_RNA,
pos_RNA_E,
pos_RNA_I,
pos_RNA_H),
n=c(round(S * w_RNA_S) + round(R * w_RNA_R),
round(E * w_RNA_E),
round(I * w_RNA_I),
round(H * w_RNA_H)),
k=sample_size_RNA,
log=log)
# Serology log likelihoods based on multivariate hypergeometric function -----
log_lik_Ser <- dmvhyper(x=c(neg_Ser,
pos_Ser_I,
pos_Ser_H,
pos_Ser_R),
n=c(round(S * w_Ser_S) + round(E * w_Ser_E),
round(I * w_Ser_I),
round(H * w_Ser_H),
round(R * w_Ser_R)),
k=sample_size_Ser,
log=log)
# Penn EHR likelihoods -------------------------------------------------------
log_lik_Penn_H <- dbinom(x=reports_Penn_H, size=H, prob=inv.logit(logit_prob_Penn_H), log=log)
log_lik_Penn_R <- dbinom(x=reports_Penn_R, size=R, prob=inv.logit(logit_prob_Penn_R), log=log)
log_lik_Penn_D <- dbinom(x=reports_Penn_D, size=D, prob=inv.logit(logit_prob_Penn_D), log=log)
# Combine the log likelihoods into combined log likelihood -------------------
combined_log_lik <- log_lik_RNA +
log_lik_Ser +
log_lik_Penn_H + log_lik_Penn_R + log_lik_Penn_D
print(combined_log_lik)
# Return combined log likelihood ---------------------------------------------
return(c(combined_log_lik, log_lik_RNA, log_lik_Ser, log_lik_Penn_H, log_lik_Penn_R, log_lik_Penn_D))
}
res_list <- list()
res_list_dex <- 1
for (row_num in 1:nrow(sim)) {
res <- dmeas(S=sim$S, E=sim$E, I=sim$I, H=sim$H, R=sim$R, D=sim$D,
sample_size_RNA=25, sample_size_Ser=50,
w_RNA_S=1, w_RNA_R=5,
w_RNA_E=5, w_RNA_I=5, w_RNA_H=5,
w_Ser_S=1, w_Ser_E=5,
w_Ser_I=5, w_Ser_H=5, w_Ser_R=5,
logit_prob_Penn_H=logit(0.2), logit_prob_Penn_R=logit(0.01), logit_prob_Penn_D=logit(0.2),
neg_RNA=sim$neg_RNA, pos_RNA_E=sim$pos_RNA_E, pos_RNA_I=sim$pos_RNA_I, pos_RNA_H=sim$pos_RNA_H,
neg_Ser=sim$neg_Ser, pos_Ser_I=sim$pos_Ser_I, pos_Ser_H=sim$pos_Ser_H, pos_Ser_R=sim$pos_Ser_R,
reports_Penn_H=sim$reports_Penn_H, reports_Penn_R=sim$reports_Penn_R, reports_Penn_D=sim$reports_Penn_D,
log=T)
res_list[[res_list_dex]] <- res / res[1]
res_list_dex <- res_list_dex + 1
}
res_df <- do.call(rbind, res_list)
View(sim)
dmeas <- function (S, E, I, H, R, D,
sample_size_RNA, sample_size_Ser,
w_RNA_S, w_RNA_R,
w_RNA_E, w_RNA_I, w_RNA_H,
w_Ser_S, w_Ser_E,
w_Ser_I, w_Ser_H, w_Ser_R,
logit_prob_Penn_H, logit_prob_Penn_R, logit_prob_Penn_D,
neg_RNA, pos_RNA_E, pos_RNA_I, pos_RNA_H,
neg_Ser, pos_Ser_I, pos_Ser_H, pos_Ser_R,
reports_Penn_H, reports_Penn_R, reports_Penn_D,
log,
...) {
# RT-PCR log likelihoods based on multivariate hypergeometric function -------
log_lik_RNA <- dmvhyper(x=c(neg_RNA,
pos_RNA_E,
pos_RNA_I,
pos_RNA_H),
n=c(round(S * w_RNA_S) + round(R * w_RNA_R),
round(E * w_RNA_E),
round(I * w_RNA_I),
round(H * w_RNA_H)),
k=sample_size_RNA,
log=log)
# Serology log likelihoods based on multivariate hypergeometric function -----
log_lik_Ser <- dmvhyper(x=c(neg_Ser,
pos_Ser_I,
pos_Ser_H,
pos_Ser_R),
n=c(round(S * w_Ser_S) + round(E * w_Ser_E),
round(I * w_Ser_I),
round(H * w_Ser_H),
round(R * w_Ser_R)),
k=sample_size_Ser,
log=log)
# Penn EHR likelihoods -------------------------------------------------------
log_lik_Penn_H <- dbinom(x=reports_Penn_H, size=H, prob=inv.logit(logit_prob_Penn_H), log=log)
log_lik_Penn_R <- dbinom(x=reports_Penn_R, size=R, prob=inv.logit(logit_prob_Penn_R), log=log)
log_lik_Penn_D <- dbinom(x=reports_Penn_D, size=D, prob=inv.logit(logit_prob_Penn_D), log=log)
# Combine the log likelihoods into combined log likelihood -------------------
combined_log_lik <- log_lik_RNA +
log_lik_Ser +
log_lik_Penn_H + log_lik_Penn_R + log_lik_Penn_D
print(log_lik_Penn_R)
# Return combined log likelihood ---------------------------------------------
return(c(combined_log_lik, log_lik_RNA, log_lik_Ser, log_lik_Penn_H, log_lik_Penn_R, log_lik_Penn_D))
}
res_list <- list()
res_list_dex <- 1
for (row_num in 1:nrow(sim)) {
res <- dmeas(S=sim$S, E=sim$E, I=sim$I, H=sim$H, R=sim$R, D=sim$D,
sample_size_RNA=25, sample_size_Ser=50,
w_RNA_S=1, w_RNA_R=5,
w_RNA_E=5, w_RNA_I=5, w_RNA_H=5,
w_Ser_S=1, w_Ser_E=5,
w_Ser_I=5, w_Ser_H=5, w_Ser_R=5,
logit_prob_Penn_H=logit(0.2), logit_prob_Penn_R=logit(0.01), logit_prob_Penn_D=logit(0.2),
neg_RNA=sim$neg_RNA, pos_RNA_E=sim$pos_RNA_E, pos_RNA_I=sim$pos_RNA_I, pos_RNA_H=sim$pos_RNA_H,
neg_Ser=sim$neg_Ser, pos_Ser_I=sim$pos_Ser_I, pos_Ser_H=sim$pos_Ser_H, pos_Ser_R=sim$pos_Ser_R,
reports_Penn_H=sim$reports_Penn_H, reports_Penn_R=sim$reports_Penn_R, reports_Penn_D=sim$reports_Penn_D,
log=T)
res_list[[res_list_dex]] <- res / res[1]
res_list_dex <- res_list_dex + 1
}
dmeas <- function (S, E, I, H, R, D,
sample_size_RNA, sample_size_Ser,
w_RNA_S, w_RNA_R,
w_RNA_E, w_RNA_I, w_RNA_H,
w_Ser_S, w_Ser_E,
w_Ser_I, w_Ser_H, w_Ser_R,
logit_prob_Penn_H, logit_prob_Penn_R, logit_prob_Penn_D,
neg_RNA, pos_RNA_E, pos_RNA_I, pos_RNA_H,
neg_Ser, pos_Ser_I, pos_Ser_H, pos_Ser_R,
reports_Penn_H, reports_Penn_R, reports_Penn_D,
log,
...) {
# RT-PCR log likelihoods based on multivariate hypergeometric function -------
log_lik_RNA <- dmvhyper(x=c(neg_RNA,
pos_RNA_E,
pos_RNA_I,
pos_RNA_H),
n=c(round(S * w_RNA_S) + round(R * w_RNA_R),
round(E * w_RNA_E),
round(I * w_RNA_I),
round(H * w_RNA_H)),
k=sample_size_RNA,
log=log)
# Serology log likelihoods based on multivariate hypergeometric function -----
log_lik_Ser <- dmvhyper(x=c(neg_Ser,
pos_Ser_I,
pos_Ser_H,
pos_Ser_R),
n=c(round(S * w_Ser_S) + round(E * w_Ser_E),
round(I * w_Ser_I),
round(H * w_Ser_H),
round(R * w_Ser_R)),
k=sample_size_Ser,
log=log)
# Penn EHR likelihoods -------------------------------------------------------
log_lik_Penn_H <- dbinom(x=reports_Penn_H, size=H, prob=inv.logit(logit_prob_Penn_H), log=log)
log_lik_Penn_R <- dbinom(x=reports_Penn_R, size=R, prob=inv.logit(logit_prob_Penn_R), log=log)
log_lik_Penn_D <- dbinom(x=reports_Penn_D, size=D, prob=inv.logit(logit_prob_Penn_D), log=log)
# Combine the log likelihoods into combined log likelihood -------------------
combined_log_lik <- log_lik_RNA +
log_lik_Ser +
log_lik_Penn_H + log_lik_Penn_R + log_lik_Penn_D
print(log_lik_RNA)
# Return combined log likelihood ---------------------------------------------
return(c(combined_log_lik, log_lik_RNA, log_lik_Ser, log_lik_Penn_H, log_lik_Penn_R, log_lik_Penn_D))
}
res_list <- list()
res_list_dex <- 1
for (row_num in 1:nrow(sim)) {
res <- dmeas(S=sim$S, E=sim$E, I=sim$I, H=sim$H, R=sim$R, D=sim$D,
sample_size_RNA=25, sample_size_Ser=50,
w_RNA_S=1, w_RNA_R=5,
w_RNA_E=5, w_RNA_I=5, w_RNA_H=5,
w_Ser_S=1, w_Ser_E=5,
w_Ser_I=5, w_Ser_H=5, w_Ser_R=5,
logit_prob_Penn_H=logit(0.2), logit_prob_Penn_R=logit(0.01), logit_prob_Penn_D=logit(0.2),
neg_RNA=sim$neg_RNA, pos_RNA_E=sim$pos_RNA_E, pos_RNA_I=sim$pos_RNA_I, pos_RNA_H=sim$pos_RNA_H,
neg_Ser=sim$neg_Ser, pos_Ser_I=sim$pos_Ser_I, pos_Ser_H=sim$pos_Ser_H, pos_Ser_R=sim$pos_Ser_R,
reports_Penn_H=sim$reports_Penn_H, reports_Penn_R=sim$reports_Penn_R, reports_Penn_D=sim$reports_Penn_D,
log=T)
res_list[[res_list_dex]] <- res / res[1]
res_list_dex <- res_list_dex + 1
}
View(sim)
res_list <- list()
res_list_dex <- 1
for (row_num in 1:nrow(sim)) {
res <- dmeas(S=sim$S, E=sim$E, I=sim$I, H=sim$H, R=sim$R, D=sim$D,
sample_size_RNA=25, sample_size_Ser=50,
w_RNA_S=1, w_RNA_R=5,
w_RNA_E=5, w_RNA_I=5, w_RNA_H=5,
w_Ser_S=1, w_Ser_E=5,
w_Ser_I=5, w_Ser_H=5, w_Ser_R=5,
logit_prob_Penn_H=logit(0.2), logit_prob_Penn_R=logit(0.01), logit_prob_Penn_D=logit(0.2),
neg_RNA=sim$neg_RNA, pos_RNA_E=sim$pos_RNA_E, pos_RNA_I=sim$pos_RNA_I, pos_RNA_H=sim$pos_RNA_H,
neg_Ser=sim$neg_Ser, pos_Ser_I=sim$pos_Ser_I, pos_Ser_H=sim$pos_Ser_H, pos_Ser_R=sim$pos_Ser_R,
reports_Penn_H=sim$reports_Penn_H, reports_Penn_R=sim$reports_Penn_R, reports_Penn_D=sim$reports_Penn_D,
log=F)
res_list[[res_list_dex]] <- res / res[1]
res_list_dex <- res_list_dex + 1
}
res_df <- do.call(rbind, res_list)
log_lik_RNA <- dmvhyper(x=c(neg_RNA,
pos_RNA_E,
pos_RNA_I,
pos_RNA_H),
n=c(round(S * w_RNA_S) + round(R * w_RNA_R),
round(E * w_RNA_E),
round(I * w_RNA_I),
round(H * w_RNA_H)),
k=sample_size_RNA,
log=log)
res_list <- list()
res_list_dex <- 1
for (row_num in 1:nrow(sim)) {
res <- dmeas(S=sim$S[row_num], E=sim$E[row_num], I=sim$I[row_num], H=sim$H[row_num], R=sim$R[row_num], D=sim$D[row_num],
sample_size_RNA=25, sample_size_Ser=50,
w_RNA_S=1, w_RNA_R=5,
w_RNA_E=5, w_RNA_I=5, w_RNA_H=5,
w_Ser_S=1, w_Ser_E=5,
w_Ser_I=5, w_Ser_H=5, w_Ser_R=5,
logit_prob_Penn_H=logit(0.2), logit_prob_Penn_R=logit(0.01), logit_prob_Penn_D=logit(0.2),
neg_RNA=sim$neg_RNA[row_num], pos_RNA_E=sim$pos_RNA_E[row_num], pos_RNA_I=sim$pos_RNA_I[row_num], pos_RNA_H=sim$pos_RNA_H[row_num],
neg_Ser=sim$neg_Ser[row_num], pos_Ser_I=sim$pos_Ser_I[row_num], pos_Ser_H=sim$pos_Ser_H[row_num], pos_Ser_R=sim$pos_Ser_R[row_num],
reports_Penn_H=sim$reports_Penn_H[row_num], reports_Penn_R=sim$reports_Penn_R[row_num], reports_Penn_D=sim$reports_Penn_D[row_num],
log=T)
res_list[[res_list_dex]] <- res / res[1]
res_list_dex <- res_list_dex + 1
}
res_df <- do.call(rbind, res_list)
View(res_df)
plot(1:90,res_df$V2, col="red")
plot(1:90,res_df[,2], col="red")
View(res_df)
res_df <- res_df[,c(2:6)]
barplot(res_df,
col=c("grey","green","red","blue"),
border="white",
space=0.04,
font.axis=2,
xlab="day",
ylab="# tests",
main="RNA data",
legend=T,
args.legend = list(x='bottomright'))
plot(1:90, res_df)
plot(1:90, res_df[,2])
plot(1:90, res_df[,2], type="l", col="red",ylab="contribution to total log likelihood", xlab="day")
lines(1:90, res_df[,3], col="blue")
lines(1:90, res_df[,4], col="green")
lines(1:90, res_df[,5], col="yellow")
lines(1:90, res_df[,6], col="purple")
plot(1:90, res_df[,2], type="l", col="red",ylab="contribution to total log likelihood", xlab="day")
lines(1:90, res_df[,3], col="blue")
lines(1:90, res_df[,4], col="green")
lines(1:90, res_df[,5], col="yellow")
lines(1:90, res_df[,6], col="purple")
plot(1:90, res_df[,1], type="l", col="red",ylab="contribution to total log likelihood", xlab="day")
lines(1:90, res_df[,2], col="blue")
lines(1:90, res_df[,3], col="green")
lines(1:90, res_df[,4], col="yellow")
lines(1:90, res_df[,5], col="purple")
colnames(res_df) <- c("RNA", "Ser", "H", "R", "D")
plot(1:90, res_df[,1], type="l", col="red",ylab="contribution to total log likelihood", xlab="day")
lines(1:90, res_df[,2], col="blue")
lines(1:90, res_df[,3], col="green")
lines(1:90, res_df[,4], col="yellow")
lines(1:90, res_df[,5], col="purple")
barplot(res_df,
col=c("grey","green","red","blue"),
border="white",
space=0.04,
font.axis=2,
xlab="day",
ylab="# tests",
main="RNA data",
legend=T,
args.legend = list(x='bottomright'))
colnames(res_df) <- c("RNA", "Ser", "H", "R", "D")
res_df <- as.matrix(res_df)
res_df <- transpose(res_df)
res_df <- t(res_df)
plot(1:90, res_df[,1], type="l", col="red",ylab="contribution to total log likelihood", xlab="day")
barplot(res_df,
col=c("grey","green","red","blue"),
border="white",
space=0.04,
font.axis=2,
xlab="day",
ylab="# tests",
main="RNA data",
legend=T,
args.legend = list(x='bottomright'))
barplot(res_df,
col=c("grey","green","red","blue","purple"),
border="white",
space=0.04,
font.axis=2,
xlab="day",
ylab="# tests",
main="RNA data",
legend=T,
args.legend = list(x='bottomright'))
barplot(res_df,
col=c("grey","green","red","blue","purple"),
border="white",
space=0.04,
font.axis=2,
xlab="day",
ylab="contribution to the total log likelihood",
main="",
legend=T,
args.legend = list(x='bottomright'))
